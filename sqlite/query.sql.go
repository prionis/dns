// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createResourceRecord = `-- name: CreateResourceRecord :one
INSERT INTO resourceRecords (
	id, domain, result, type, class, ttl
) values (
?,?,?,?,?,?
)
RETURNING id, domain, result, type, class, ttl
`

type CreateResourceRecordParams struct {
	ID     int64
	Domain string
	Result string
	Type   string
	Class  string
	Ttl    sql.NullInt64
}

func (q *Queries) CreateResourceRecord(ctx context.Context, arg CreateResourceRecordParams) (Resourcerecord, error) {
	row := q.db.QueryRowContext(ctx, createResourceRecord,
		arg.ID,
		arg.Domain,
		arg.Result,
		arg.Type,
		arg.Class,
		arg.Ttl,
	)
	var i Resourcerecord
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Result,
		&i.Type,
		&i.Class,
		&i.Ttl,
	)
	return i, err
}

const deleteResourceRecord = `-- name: DeleteResourceRecord :exec
DELETE FROM resourceRecords
WHERE id = ?
`

func (q *Queries) DeleteResourceRecord(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteResourceRecord, id)
	return err
}

const getResourceRecord = `-- name: GetResourceRecord :many
SELECT id, domain, result, type, class, ttl FROM resourceRecords
WHERE domain = ?
`

func (q *Queries) GetResourceRecord(ctx context.Context, domain string) ([]Resourcerecord, error) {
	rows, err := q.db.QueryContext(ctx, getResourceRecord, domain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resourcerecord
	for rows.Next() {
		var i Resourcerecord
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Result,
			&i.Type,
			&i.Class,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceRecordRecursive = `-- name: GetResourceRecordRecursive :many
SELECT id, domain, result, type, class, ttl FROM resourceRecords
WHERE result = ?
`

func (q *Queries) GetResourceRecordRecursive(ctx context.Context, result string) ([]Resourcerecord, error) {
	rows, err := q.db.QueryContext(ctx, getResourceRecordRecursive, result)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resourcerecord
	for rows.Next() {
		var i Resourcerecord
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Result,
			&i.Type,
			&i.Class,
			&i.Ttl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
